/*
 * Software Engineering Project Juggernaut
 * Jaehwan Lee
 * Sujeong Kim
 */
package cse.se.juggernaut;

import java.awt.Component;
import java.util.ArrayList;
import java.util.Enumeration;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.table.TableColumn;
import javax.swing.tree.DefaultMutableTreeNode;

public class Interface extends javax.swing.JFrame {

    /**
     * Creates new form Interface
     * Creates control interfaces
     */
    public Interface() {
        
        this.showRowLabels = true;
        this.dsmChanged = false;
        this.clusterChanged = false;
        
        this.fileChooser = new javax.swing.JFileChooser();
        this.controlInterface = new Controller();
        
        System.out.println("[DEBUG] Interface Initialized");
        
        initComponents();
    }
    
    private void setIconEnabled()
    {
        // menu-file
        ItemSaveDSM.setEnabled(true);
        ItemSaveDSMAs.setEnabled(true);
        ItemNewClustering.setEnabled(true);
        ItemLoadClustering.setEnabled(true);
        ItemSaveClustering.setEnabled(true);
        ItemSaveClusteringAs.setEnabled(true);
        
        // menu-view
        ItemRedraw.setEnabled(true);
        
        // menu-toolbox
        IconSaveDSM.setEnabled(true);
        IconSaveDSMAs.setEnabled(true);
        IconRedraw.setEnabled(true);
        IconNewClustering.setEnabled(true);
        IconLoadClustering.setEnabled(true);
        IconSaveClustering.setEnabled(true);
        IconSaveClusteringAs.setEnabled(true);
        
        // leftpanel-toolbox
        IconNewDSMRow.setEnabled(true);
        IconDelete.setEnabled(true);
        IconSort.setEnabled(true);
        IconExpandAll.setEnabled(true);
        IconCollapseAll.setEnabled(true);
        IconGroup.setEnabled(true);
        IconUngroup.setEnabled(true);
        IconMoveUp.setEnabled(true);
        IconMoveDown.setEnabled(true);
        IconRename.setEnabled(true);
        IconPartition.setEnabled(true);
    }
    
    private void setTreeViewUpdate(){
        moduleTree = this.controlInterface.getTreeViewUpdate();
        jScrollPane1.setViewportView(moduleTree);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar2 = new javax.swing.JToolBar();
        IconRedraw = new javax.swing.JButton();
        jSeparator11 = new javax.swing.JToolBar.Separator();
        IconNewDSM = new javax.swing.JButton();
        IconOpenDSM = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        IconSaveDSM = new javax.swing.JButton();
        IconSaveDSMAs = new javax.swing.JButton();
        jSeparator12 = new javax.swing.JToolBar.Separator();
        IconNewClustering = new javax.swing.JButton();
        IconLoadClustering = new javax.swing.JButton();
        jSeparator13 = new javax.swing.JToolBar.Separator();
        IconSaveClustering = new javax.swing.JButton();
        IconSaveClusteringAs = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        IconNewDSMRow = new javax.swing.JButton();
        IconRename = new javax.swing.JButton();
        IconDelete = new javax.swing.JButton();
        jSeparator14 = new javax.swing.JPopupMenu.Separator();
        IconExpandAll = new javax.swing.JButton();
        IconCollapseAll = new javax.swing.JButton();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        IconGroup = new javax.swing.JButton();
        IconUngroup = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JPopupMenu.Separator();
        IconMoveUp = new javax.swing.JButton();
        IconMoveDown = new javax.swing.JButton();
        jSeparator10 = new javax.swing.JPopupMenu.Separator();
        IconSort = new javax.swing.JButton();
        IconPartition = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        moduleTree = new javax.swing.JTree();
        jPanel2 = new javax.swing.JPanel();
        tablePanel = new javax.swing.JScrollPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        MenuFile = new javax.swing.JMenu();
        ItemNewDSM = new javax.swing.JMenuItem();
        ItemOpenDSM = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        ItemSaveDSM = new javax.swing.JMenuItem();
        ItemSaveDSMAs = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        ItemNewClustering = new javax.swing.JMenuItem();
        ItemLoadClustering = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        ItemSaveClustering = new javax.swing.JMenuItem();
        ItemSaveClusteringAs = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        ItemExit = new javax.swing.JMenuItem();
        MenuMetrics = new javax.swing.JMenu();
        ItemPropagationCost = new javax.swing.JMenuItem();
        MenuView = new javax.swing.JMenu();
        ItemRedraw = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        ItemFind = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        ItemShowRowLabels = new javax.swing.JCheckBoxMenuItem();
        ItemShowDepStr = new javax.swing.JCheckBoxMenuItem();
        MenuHelp = new javax.swing.JMenu();
        ItemAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar2.setFloatable(false);
        jToolBar2.setMinimumSize(new java.awt.Dimension(600, 23));

        IconRedraw.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/redraw.png"))); // NOI18N
        IconRedraw.setToolTipText("Redraw");
        IconRedraw.setEnabled(false);
        IconRedraw.setFocusable(false);
        IconRedraw.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IconRedraw.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        IconRedraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IconRedrawActionPerformed(evt);
            }
        });
        jToolBar2.add(IconRedraw);
        jToolBar2.add(jSeparator11);

        IconNewDSM.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/new-dsm.png"))); // NOI18N
        IconNewDSM.setToolTipText("New DSM");
        IconNewDSM.setFocusable(false);
        IconNewDSM.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IconNewDSM.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        IconNewDSM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IconNewDSMActionPerformed(evt);
            }
        });
        jToolBar2.add(IconNewDSM);

        IconOpenDSM.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/open-dsm.png"))); // NOI18N
        IconOpenDSM.setToolTipText("Open DSM");
        IconOpenDSM.setFocusable(false);
        IconOpenDSM.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IconOpenDSM.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        IconOpenDSM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IconOpenDSMActionPerformed(evt);
            }
        });
        jToolBar2.add(IconOpenDSM);
        jToolBar2.add(jSeparator1);

        IconSaveDSM.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/save-clsx.png"))); // NOI18N
        IconSaveDSM.setToolTipText("Save DSM");
        IconSaveDSM.setEnabled(false);
        IconSaveDSM.setFocusable(false);
        IconSaveDSM.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IconSaveDSM.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(IconSaveDSM);

        IconSaveDSMAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/save-clsx-as.png"))); // NOI18N
        IconSaveDSMAs.setToolTipText("Save DSM As...");
        IconSaveDSMAs.setEnabled(false);
        IconSaveDSMAs.setFocusable(false);
        IconSaveDSMAs.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IconSaveDSMAs.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(IconSaveDSMAs);
        jToolBar2.add(jSeparator12);

        IconNewClustering.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/new-clsx.png"))); // NOI18N
        IconNewClustering.setToolTipText("New Clustering");
        IconNewClustering.setEnabled(false);
        IconNewClustering.setFocusable(false);
        IconNewClustering.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IconNewClustering.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        IconNewClustering.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IconNewClusteringActionPerformed(evt);
            }
        });
        jToolBar2.add(IconNewClustering);

        IconLoadClustering.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/open-clsx.png"))); // NOI18N
        IconLoadClustering.setToolTipText("Load CLustering");
        IconLoadClustering.setEnabled(false);
        IconLoadClustering.setFocusable(false);
        IconLoadClustering.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IconLoadClustering.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(IconLoadClustering);
        jToolBar2.add(jSeparator13);

        IconSaveClustering.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/save-clsx.png"))); // NOI18N
        IconSaveClustering.setToolTipText("Save Clustering");
        IconSaveClustering.setEnabled(false);
        IconSaveClustering.setFocusable(false);
        IconSaveClustering.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IconSaveClustering.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(IconSaveClustering);

        IconSaveClusteringAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/save-clsx-as.png"))); // NOI18N
        IconSaveClusteringAs.setToolTipText("Save Clustering As...");
        IconSaveClusteringAs.setEnabled(false);
        IconSaveClusteringAs.setFocusable(false);
        IconSaveClusteringAs.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IconSaveClusteringAs.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(IconSaveClusteringAs);

        jPanel1.setMinimumSize(new java.awt.Dimension(265, 0));

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setBorderPainted(false);
        jToolBar1.setMinimumSize(new java.awt.Dimension(265, 25));

        IconNewDSMRow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/new-row.png"))); // NOI18N
        IconNewDSMRow.setToolTipText("New DSM Row");
        IconNewDSMRow.setEnabled(false);
        IconNewDSMRow.setFocusable(false);
        IconNewDSMRow.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IconNewDSMRow.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        IconNewDSMRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IconNewDSMRowActionPerformed(evt);
            }
        });
        jToolBar1.add(IconNewDSMRow);

        IconRename.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/rename.png"))); // NOI18N
        IconRename.setToolTipText("Rename");
        IconRename.setEnabled(false);
        IconRename.setFocusable(false);
        IconRename.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IconRename.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        IconRename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IconRenameActionPerformed(evt);
            }
        });
        jToolBar1.add(IconRename);

        IconDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/delete.png"))); // NOI18N
        IconDelete.setToolTipText("Delete");
        IconDelete.setEnabled(false);
        IconDelete.setFocusable(false);
        IconDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IconDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        IconDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IconDeleteActionPerformed(evt);
            }
        });
        jToolBar1.add(IconDelete);

        jSeparator14.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar1.add(jSeparator14);

        IconExpandAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/expand.png"))); // NOI18N
        IconExpandAll.setToolTipText("Expand All");
        IconExpandAll.setEnabled(false);
        IconExpandAll.setFocusable(false);
        IconExpandAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IconExpandAll.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        IconExpandAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IconExpandAllActionPerformed(evt);
            }
        });
        jToolBar1.add(IconExpandAll);

        IconCollapseAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/collapse.png"))); // NOI18N
        IconCollapseAll.setToolTipText("Collapse All");
        IconCollapseAll.setEnabled(false);
        IconCollapseAll.setFocusable(false);
        IconCollapseAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IconCollapseAll.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        IconCollapseAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IconCollapseAllActionPerformed(evt);
            }
        });
        jToolBar1.add(IconCollapseAll);

        jSeparator8.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar1.add(jSeparator8);

        IconGroup.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/group.png"))); // NOI18N
        IconGroup.setToolTipText("Group");
        IconGroup.setEnabled(false);
        IconGroup.setFocusable(false);
        IconGroup.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IconGroup.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        IconGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IconGroupActionPerformed(evt);
            }
        });
        jToolBar1.add(IconGroup);

        IconUngroup.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/ungroup.png"))); // NOI18N
        IconUngroup.setToolTipText("Ungroup");
        IconUngroup.setEnabled(false);
        IconUngroup.setFocusable(false);
        IconUngroup.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IconUngroup.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        IconUngroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IconUngroupActionPerformed(evt);
            }
        });
        jToolBar1.add(IconUngroup);

        jSeparator9.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar1.add(jSeparator9);

        IconMoveUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/up.png"))); // NOI18N
        IconMoveUp.setToolTipText("Move Up");
        IconMoveUp.setEnabled(false);
        IconMoveUp.setFocusable(false);
        IconMoveUp.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IconMoveUp.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        IconMoveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IconMoveUpActionPerformed(evt);
            }
        });
        jToolBar1.add(IconMoveUp);

        IconMoveDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/down.png"))); // NOI18N
        IconMoveDown.setToolTipText("Move Down");
        IconMoveDown.setEnabled(false);
        IconMoveDown.setFocusable(false);
        IconMoveDown.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IconMoveDown.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        IconMoveDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IconMoveDownActionPerformed(evt);
            }
        });
        jToolBar1.add(IconMoveDown);

        jSeparator10.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar1.add(jSeparator10);

        IconSort.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/sort.png"))); // NOI18N
        IconSort.setToolTipText("Sort");
        IconSort.setEnabled(false);
        IconSort.setFocusable(false);
        IconSort.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IconSort.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        IconSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IconSortActionPerformed(evt);
            }
        });
        jToolBar1.add(IconSort);

        IconPartition.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/partition.png"))); // NOI18N
        IconPartition.setToolTipText("Partition");
        IconPartition.setEnabled(false);
        IconPartition.setFocusable(false);
        IconPartition.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IconPartition.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        IconPartition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IconPartitionActionPerformed(evt);
            }
        });
        jToolBar1.add(IconPartition);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(252, 23));

        moduleTree.setExpandsSelectedPaths(false);
        moduleTree.setMaximumSize(new java.awt.Dimension(2048, 64));
        moduleTree.setMinimumSize(new java.awt.Dimension(265, 0));
        moduleTree.setPreferredSize(new java.awt.Dimension(200, 64));
        moduleTree.setVisible(false);
        jScrollPane1.setViewportView(moduleTree);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(jPanel1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 790, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 790, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 550, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel2);

        MenuFile.setText("File");

        ItemNewDSM.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/new-dsm.png"))); // NOI18N
        ItemNewDSM.setText("New DSM");
        ItemNewDSM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemNewDSMActionPerformed(evt);
            }
        });
        MenuFile.add(ItemNewDSM);

        ItemOpenDSM.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/open-dsm.png"))); // NOI18N
        ItemOpenDSM.setText("Open DSM...");
        ItemOpenDSM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemOpenDSMActionPerformed(evt);
            }
        });
        MenuFile.add(ItemOpenDSM);
        MenuFile.add(jSeparator2);

        ItemSaveDSM.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/save-clsx.png"))); // NOI18N
        ItemSaveDSM.setText("Save DSM");
        ItemSaveDSM.setEnabled(false);
        ItemSaveDSM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemSaveDSMActionPerformed(evt);
            }
        });
        MenuFile.add(ItemSaveDSM);

        ItemSaveDSMAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/save-clsx-as.png"))); // NOI18N
        ItemSaveDSMAs.setText("Save DSM As...");
        ItemSaveDSMAs.setEnabled(false);
        ItemSaveDSMAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemSaveDSMAsActionPerformed(evt);
            }
        });
        MenuFile.add(ItemSaveDSMAs);
        MenuFile.add(jSeparator3);

        ItemNewClustering.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/new-clsx.png"))); // NOI18N
        ItemNewClustering.setText("New Clustering");
        ItemNewClustering.setEnabled(false);
        ItemNewClustering.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemNewClusteringActionPerformed(evt);
            }
        });
        MenuFile.add(ItemNewClustering);

        ItemLoadClustering.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/open-clsx.png"))); // NOI18N
        ItemLoadClustering.setText("Load Clustering ...");
        ItemLoadClustering.setEnabled(false);
        ItemLoadClustering.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemLoadClusteringActionPerformed(evt);
            }
        });
        MenuFile.add(ItemLoadClustering);
        MenuFile.add(jSeparator4);

        ItemSaveClustering.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/save-clsx.png"))); // NOI18N
        ItemSaveClustering.setText("Save Clustering");
        ItemSaveClustering.setEnabled(false);
        ItemSaveClustering.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemSaveClusteringActionPerformed(evt);
            }
        });
        MenuFile.add(ItemSaveClustering);

        ItemSaveClusteringAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/save-clsx-as.png"))); // NOI18N
        ItemSaveClusteringAs.setText("Save Clustering As...");
        ItemSaveClusteringAs.setEnabled(false);
        ItemSaveClusteringAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemSaveClusteringAsActionPerformed(evt);
            }
        });
        MenuFile.add(ItemSaveClusteringAs);
        MenuFile.add(jSeparator5);

        ItemExit.setText("Exit");
        ItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemExitActionPerformed(evt);
            }
        });
        MenuFile.add(ItemExit);

        jMenuBar1.add(MenuFile);

        MenuMetrics.setText("Metrics");

        ItemPropagationCost.setText("Propagation Cost");
        ItemPropagationCost.setEnabled(false);
        ItemPropagationCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemPropagationCostActionPerformed(evt);
            }
        });
        MenuMetrics.add(ItemPropagationCost);

        jMenuBar1.add(MenuMetrics);

        MenuView.setText("View");

        ItemRedraw.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cse/se/juggernaut/icons/redraw.png"))); // NOI18N
        ItemRedraw.setText("Redraw");
        ItemRedraw.setEnabled(false);
        ItemRedraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemRedrawActionPerformed(evt);
            }
        });
        MenuView.add(ItemRedraw);
        MenuView.add(jSeparator6);

        ItemFind.setText("Find");
        ItemFind.setEnabled(false);
        MenuView.add(ItemFind);
        MenuView.add(jSeparator7);

        ItemShowRowLabels.setSelected(true);
        ItemShowRowLabels.setText("Show Row Labels");
        ItemShowRowLabels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemShowRowLabelsActionPerformed(evt);
            }
        });
        MenuView.add(ItemShowRowLabels);

        ItemShowDepStr.setText("jCheckBoxMenuItem1");
        ItemShowDepStr.setEnabled(false);
        MenuView.add(ItemShowDepStr);

        jMenuBar1.add(MenuView);

        MenuHelp.setText("Help");

        ItemAbout.setText("Help");
        ItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemAboutActionPerformed(evt);
            }
        });
        MenuHelp.add(ItemAbout);

        jMenuBar1.add(MenuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1))
        );

        jToolBar2.setFloatable(false);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void IconRedrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IconRedrawActionPerformed
        
        // TODO Coloring!!!:
        Object[][] obj = this.controlInterface.getTable();

        ArrayList<String> en = this.controlInterface.getModel().getTableEntry();
        DefaultListModel<String> lm = new DefaultListModel();
        for(int i=0; i<en.size(); i++){
            lm.addElement(en.get(i));
        }
        
        String[] colheader = new String[en.size()];
        for(int i=0; i<colheader.length; i++){
            colheader[i] = (new Integer(i)).toString();
        }
        JTable table = new JTable(obj, colheader);
        
        
        /* coloring here */
        table.getColumnModel().getColumn(0);
        
        
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        Enumeration<TableColumn> e = table.getColumnModel().getColumns();
        while(e.hasMoreElements()){
            TableColumn c = e.nextElement();
            c.setPreferredWidth(25);
        }
        
        JList rowHeader = new JList(lm);
        rowHeader.setAutoscrolls(true);
        rowHeader.setFixedCellHeight(table.getRowHeight()+table.getRowMargin());
        rowHeader = this.controlInterface.setCellRenderer(rowHeader, table);
        
        tablePanel.setViewportView(table);
        tablePanel.setRowHeaderView(rowHeader);
    }//GEN-LAST:event_IconRedrawActionPerformed

    private void ItemSaveDSMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemSaveDSMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemSaveDSMActionPerformed

    private void ItemPropagationCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemPropagationCostActionPerformed
        // Will not be implemented
    }//GEN-LAST:event_ItemPropagationCostActionPerformed

    private void IconNewDSMRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IconNewDSMRowActionPerformed
        
        String str = JOptionPane.showInputDialog("Enter row name : \n");
        if( !str.isEmpty() ){
            this.controlInterface.getModel().addNode(str, new ArrayList());
        }
        
        this.setTreeViewUpdate();
    }//GEN-LAST:event_IconNewDSMRowActionPerformed

    private void IconPartitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IconPartitionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IconPartitionActionPerformed

    private void IconMoveUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IconMoveUpActionPerformed

        // TODO: test for multiple rows
        
        int rows[] = moduleTree.getSelectionRows();
        for(int i = 0; i<rows.length; i++){
            DefaultMutableTreeNode node;
            node = (DefaultMutableTreeNode) moduleTree.getPathForRow(rows[i]).getLastPathComponent();
            if( !node.equals(this.controlInterface.getModel().getRoot()) ){
                this.controlInterface.getModel().moveNodeUp(node.toString());
            }
        }
        
        this.setTreeViewUpdate();
    }//GEN-LAST:event_IconMoveUpActionPerformed

    private void ItemOpenDSMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemOpenDSMActionPerformed
        
        int ret = fileChooser.showOpenDialog(this);
        if(ret == JFileChooser.APPROVE_OPTION){
            if(controlInterface.openDSM(fileChooser.getSelectedFile())){
                /* test tree view */
                this.setTreeViewUpdate();
                
                /* set icon enabled */
                this.setIconEnabled();
                
                //Item
            } else {
                // TODO : error
            }
        }
    }//GEN-LAST:event_ItemOpenDSMActionPerformed

    private void ItemNewDSMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemNewDSMActionPerformed
        
        String str = JOptionPane.showInputDialog("Enter the number of rows:");
        int nrows = Integer.parseInt(str);
        if(controlInterface.newDSM(nrows)){
            /* test tree view */
            this.setTreeViewUpdate();
            
            /* set icon enabled */
            this.setIconEnabled();
            
        } else {
              JOptionPane.showMessageDialog(this, "Error creating new DSM", "New DSM Error" , JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ItemNewDSMActionPerformed

    private void IconNewDSMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IconNewDSMActionPerformed

        ItemNewDSMActionPerformed(evt);
    }//GEN-LAST:event_IconNewDSMActionPerformed

    private void IconOpenDSMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IconOpenDSMActionPerformed

        ItemOpenDSMActionPerformed(evt);
    }//GEN-LAST:event_IconOpenDSMActionPerformed

    private void ItemSaveDSMAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemSaveDSMAsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemSaveDSMAsActionPerformed

    private void ItemNewClusteringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemNewClusteringActionPerformed
        
        /* TODO: ask save if there is any change */
        
        Enumeration<DefaultMutableTreeNode> e = this.controlInterface.getModel().getRoot().depthFirstEnumeration();
        while(e.hasMoreElements()){
            DefaultMutableTreeNode node = e.nextElement();
            if( !node.isRoot() ){
                if(!node.isLeaf()){
                    this.controlInterface.getModel().ungroup(node.toString());
                }
            }
        }
    }//GEN-LAST:event_ItemNewClusteringActionPerformed

    private void ItemLoadClusteringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemLoadClusteringActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemLoadClusteringActionPerformed

    private void ItemSaveClusteringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemSaveClusteringActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemSaveClusteringActionPerformed

    private void ItemSaveClusteringAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemSaveClusteringAsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemSaveClusteringAsActionPerformed

    private void ItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemExitActionPerformed

        System.exit(0);
    }//GEN-LAST:event_ItemExitActionPerformed

    private void ItemRedrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemRedrawActionPerformed

        this.IconRedrawActionPerformed(evt);
    }//GEN-LAST:event_ItemRedrawActionPerformed

    private void ItemShowRowLabelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemShowRowLabelsActionPerformed
        this.showRowLabels = !(this.showRowLabels);
        System.out.println("[DEBUG] show row labels checked : " + this.showRowLabels);
    }//GEN-LAST:event_ItemShowRowLabelsActionPerformed

    private void ItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemAboutActionPerformed

        JOptionPane.showMessageDialog(this, "Project Juggernaut\nChung-Ang University\n20101566 Jaehwan Lee\n20101502 Sujeong Kim");
    }//GEN-LAST:event_ItemAboutActionPerformed

    private void IconRenameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IconRenameActionPerformed

        // !!TODO: Test for group
        
        if(this.moduleTree.getSelectionCount() > 1){
            // too many nodes
        } else if(this.moduleTree.getSelectionCount()<1){
            // no node
        } else {
            String newname = JOptionPane.showInputDialog("New name : ");
            if( !newname.isEmpty() ){
                int rows[] = this.moduleTree.getSelectionRows();
                ArrayList<String> en = this.controlInterface.getModel().getTreeEntry();
                String oldname = en.get(rows[0]-1);

                this.controlInterface.getModel().renameNode(oldname, newname);
            }
        }
        
        this.setTreeViewUpdate();
    }//GEN-LAST:event_IconRenameActionPerformed

    private void IconDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IconDeleteActionPerformed
        
        // !!TODO: Test for group
        
        DefaultMutableTreeNode root = this.controlInterface.getModel().getRoot();
        ArrayList<String> en = this.controlInterface.getModel().getTreeEntry();
        
        int rows[] = this.moduleTree.getSelectionRows();
        for(int i=0; i<rows.length; i++){
            if(this.controlInterface.getModel().findNode(root, en.get(rows[i]-1)).isLeaf()){
                this.controlInterface.getModel().deleteNode(en.get(rows[i]-1));
            } else {
                JOptionPane.showMessageDialog(this, "Ungroup node before delete!", "Deletion  error", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        this.setTreeViewUpdate();
    }//GEN-LAST:event_IconDeleteActionPerformed

    private void IconExpandAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IconExpandAllActionPerformed

        this.controlInterface.setExpandAll();
        this.setTreeViewUpdate();
    }//GEN-LAST:event_IconExpandAllActionPerformed

    private void IconCollapseAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IconCollapseAllActionPerformed

        this.controlInterface.setCollapseAll();
        this.setTreeViewUpdate();
    }//GEN-LAST:event_IconCollapseAllActionPerformed

    private void IconGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IconGroupActionPerformed

        DefaultMutableTreeNode root = this.controlInterface.getModel().getRoot();
        ArrayList<String> en = this.controlInterface.getModel().getTreeEntry();
        
        if(this.moduleTree.getSelectionCount()>0){
            int rows[] = this.moduleTree.getSelectionRows();
            DefaultMutableTreeNode args[] = new DefaultMutableTreeNode[rows.length];
            for(int i=0; i<rows.length; i++){
                args[i] = this.controlInterface.getModel().findNode(root, en.get(rows[i]-1));
            }
            String str = JOptionPane.showInputDialog("Enter Group Name\n");
            this.controlInterface.getModel().group(str, args);
        }
        
        this.setTreeViewUpdate();
    }//GEN-LAST:event_IconGroupActionPerformed

    private void IconUngroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IconUngroupActionPerformed

        // TODO: test
        DefaultMutableTreeNode root = this.controlInterface.getModel().getRoot();
        ArrayList<String> en = this.controlInterface.getModel().getTreeEntry();
        
        System.out.println("@#$@#$ PATH : " + this.moduleTree.getSelectionPath().toString());
        
        if(this.moduleTree.getSelectionCount()>0){
            int rows[] = this.moduleTree.getSelectionRows();
            DefaultMutableTreeNode node = this.controlInterface.getModel().findNode(root, en.get(rows[0]-1));
            if(!node.isRoot()){
                this.controlInterface.getModel().ungroup(node.toString());
            }
        }
        
        this.setTreeViewUpdate();
    }//GEN-LAST:event_IconUngroupActionPerformed

    private void IconMoveDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IconMoveDownActionPerformed
        
        // TODO: test for multiple rows
        
        int rows[] = moduleTree.getSelectionRows();
        for(int i = 0; i<rows.length; i++){
            DefaultMutableTreeNode node;
            node = (DefaultMutableTreeNode) moduleTree.getPathForRow(rows[i]).getLastPathComponent();
            if( !node.equals(this.controlInterface.getModel().getRoot()) ){
                this.controlInterface.getModel().moveNodeDown(node.toString());
            }
        }
        
        this.setTreeViewUpdate();
    }//GEN-LAST:event_IconMoveDownActionPerformed

    private void IconSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IconSortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IconSortActionPerformed

    private void IconNewClusteringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IconNewClusteringActionPerformed

        this.ItemNewClusteringActionPerformed(evt);
    }//GEN-LAST:event_IconNewClusteringActionPerformed

    
    // Custom variable declaration
    private javax.swing.JFileChooser fileChooser;
    private Controller controlInterface;
    
    private boolean showRowLabels;
    private boolean dsmChanged;
    private boolean clusterChanged;
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton IconCollapseAll;
    private javax.swing.JButton IconDelete;
    private javax.swing.JButton IconExpandAll;
    private javax.swing.JButton IconGroup;
    private javax.swing.JButton IconLoadClustering;
    private javax.swing.JButton IconMoveDown;
    private javax.swing.JButton IconMoveUp;
    private javax.swing.JButton IconNewClustering;
    private javax.swing.JButton IconNewDSM;
    private javax.swing.JButton IconNewDSMRow;
    private javax.swing.JButton IconOpenDSM;
    private javax.swing.JButton IconPartition;
    private javax.swing.JButton IconRedraw;
    private javax.swing.JButton IconRename;
    private javax.swing.JButton IconSaveClustering;
    private javax.swing.JButton IconSaveClusteringAs;
    private javax.swing.JButton IconSaveDSM;
    private javax.swing.JButton IconSaveDSMAs;
    private javax.swing.JButton IconSort;
    private javax.swing.JButton IconUngroup;
    private javax.swing.JMenuItem ItemAbout;
    private javax.swing.JMenuItem ItemExit;
    private javax.swing.JMenuItem ItemFind;
    private javax.swing.JMenuItem ItemLoadClustering;
    private javax.swing.JMenuItem ItemNewClustering;
    private javax.swing.JMenuItem ItemNewDSM;
    private javax.swing.JMenuItem ItemOpenDSM;
    private javax.swing.JMenuItem ItemPropagationCost;
    private javax.swing.JMenuItem ItemRedraw;
    private javax.swing.JMenuItem ItemSaveClustering;
    private javax.swing.JMenuItem ItemSaveClusteringAs;
    private javax.swing.JMenuItem ItemSaveDSM;
    private javax.swing.JMenuItem ItemSaveDSMAs;
    private javax.swing.JCheckBoxMenuItem ItemShowDepStr;
    private javax.swing.JCheckBoxMenuItem ItemShowRowLabels;
    private javax.swing.JMenu MenuFile;
    private javax.swing.JMenu MenuHelp;
    private javax.swing.JMenu MenuMetrics;
    private javax.swing.JMenu MenuView;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator10;
    private javax.swing.JToolBar.Separator jSeparator11;
    private javax.swing.JToolBar.Separator jSeparator12;
    private javax.swing.JToolBar.Separator jSeparator13;
    private javax.swing.JPopupMenu.Separator jSeparator14;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JPopupMenu.Separator jSeparator9;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JTree moduleTree;
    private javax.swing.JScrollPane tablePanel;
    // End of variables declaration//GEN-END:variables
}
